
var R,
icinfo = R = icinfo || {
    version: "1.0.0"
};
window.console = window.console || {
    log: function() {}
};
icinfo.string = icinfo.string || {};
icinfo.string.trim = function(source) {
    return String(source).replace(new RegExp("(^[\\s\\t\\xa0\\u3000]+)|([\\u3000\\xa0\\s\\t]+\x24)", "g"), "")
}
icinfo.trim = icinfo.string.trim;
icinfo.string.byteLength = function(source) {
    return String(source).replace(/[^\x00-\xff]/g, "ci").length
};
icinfo.byteLength = icinfo.string.byteLength;
icinfo.string.byteSubstr = function(source, length, tail) {
    source = String(source);
    tail = tail || '';
    if (length < 0 || icinfo.string.byteLength(source) <= length) {
        return source + tail
    }
    source = source.substr(0, length).replace(/([^\x00-\xff])/g, "\x241 ").substr(0, length).replace(/[^\x00-\xff]$/, "").replace(/([^\x00-\xff]) /g, "\x241");
    return source + tail
};
icinfo.byteSubstr = icinfo.string.byteSubstr;
icinfo.string.toCamel = function(source) {
    if (source.indexOf('-') < 0 && source.indexOf('_') < 0) {
        return source
    }
    return source.replace(/[-_][^-_]/g,
    function(match) {
        return match.charAt(1).toUpperCase()
    })
};
icinfo.toCamel = icinfo.string.toCamel;
icinfo.string.decodeHTML = function(source) {
    var str = String(source).replace(/&quot;/g, '"').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, "&");
    return str.replace(/&#([\d]+);/g,
    function(_0, _1) {
        return String.fromCharCode(parseInt(_1, 10))
    })
};
icinfo.decodeHTML = icinfo.string.decodeHTML;
icinfo.string.encodeHTML = function(source) {
    return String(source).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, "&quot;").replace(/'/g, "&#39;")
};
icinfo.encodeHTML = icinfo.string.encodeHTML;
icinfo.array = icinfo.array || {};
icinfo.array.indexOf = function(source, match, fromIndex) {
    var len = source.length,
    iterator = match;
    fromIndex = fromIndex | 0;
    if (fromIndex < 0) {
        fromIndex = Math.max(0, len + fromIndex)
    }
    for (; fromIndex < len; fromIndex++) {
        if (fromIndex in source && source[fromIndex] === match) {
            return fromIndex
        }
    }
    return - 1
};
icinfo.array.contains = function(source, obj) {
    return (icinfo.array.indexOf(source, obj) >= 0)
}
icinfo.array.unique = function(source, compareFn) {
    var len = source.length,
    result = source.slice(0),
    i,
    datum;
    if ('function' != typeof compareFn) {
        compareFn = function(item1, item2) {
            return item1 === item2
        }
    }
    while (--len > 0) {
        datum = result[len];
        i = len;
        while (i--) {
            if (compareFn(datum, result[i])) {
                result.splice(len, 1);
                break
            }
        }
    }
    return result
};
icinfo.array.hash = function(keys, values) {
    var o = {},
    vl = values && values.length,
    i = 0,
    l = keys.length;
    for (; i < l; i++) {
        o[keys[i]] = (vl && vl > i) ? values[i] : true
    }
    return o
}
icinfo.array.remove = function(source, match) {
    var len = source.length;
    while (len--) {
        if (len in source && source[len] === match) {
            source.splice(len, 1)
        }
    }
    return source
};
icinfo.array.reduce = function(source, iterator, initializer) {
    var i = 0,
    l = source.length,
    found = 0;
    if (arguments.length < 3) {
        for (; i < l; i++) {
            initializer = source[i++];
            found = 1;
            break
        }
        if (!found) {
            return
        }
    }
    for (; i < l; i++) {
        if (i in source) {
            initializer = iterator(initializer, source[i], i, source)
        }
    }
    return initializer
};
icinfo.array.map = function(source, iterator, thisObject) {
    var results = [],
    i = 0,
    l = source.length;
    for (; i < l; i++) {
        results[i] = iterator.call(thisObject || source, source[i], i)
    }
    return results
};
icinfo.cookie = icinfo.cookie || {};
icinfo.cookie._isValidKey = function(key) {
    return (new RegExp("^[^\\x00-\\x20\\x7f\\(\\)<>@,;:\\\\\\\"\\[\\]\\?=\\{\\}\\/\\u0080-\\uffff]+\x24")).test(key)
};
icinfo.cookie.setRaw = function(key, value, options) {
    if (!icinfo.cookie._isValidKey(key)) {
        return
    }
    options = options || {};
    var expires = options.expires;
    if ('number' == typeof options.expires) {
        expires = new Date();
        expires.setTime(expires.getTime() + options.expires)
    }
    document.cookie = key + "=" + value + (options.path ? "; path=" + options.path: "") + (expires ? "; expires=" + expires.toGMTString() : "") + (options.domain ? "; domain=" + options.domain: "") + (options.secure ? "; secure": '')
};
icinfo.cookie.set = function(key, value, options) {
    icinfo.cookie.setRaw(key, encodeURIComponent(value), options)
};
icinfo.cookie.getRaw = function(key) {
    if (icinfo.cookie._isValidKey(key)) {
        var reg = new RegExp("(^| )" + key + "=([^;]*)(;|\x24)"),
        result = reg.exec(document.cookie);
        if (result) {
            return result[2] || null
        }
    }
    return null
};
icinfo.cookie.get = function(key) {
    var value = icinfo.cookie.getRaw(key);
    if ('string' == typeof value) {
        value = decodeURIComponent(value);
        return value
    }
    return null
};
icinfo.date = icinfo.date || {};
icinfo.date.parse = function(source) {
    var reg = new RegExp("^\\d+(\\-|\\/)\\d+(\\-|\\/)\\d+\x24");
    if ('string' == typeof source) {
        if (reg.test(source) || isNaN(Date.parse(source))) {
            var d = source.split(/ |T/),
            d1 = d.length > 1 ? d[1].split(/[^\d]/) : [0, 0, 0],
            d0 = d[0].split(/[^\d]/);
            return new Date(d0[0] - 0, d0[1] - 1, d0[2] - 0, d1[0] - 0, d1[1] - 0, d1[2] - 0)
        } else {
            return new Date(source)
        }
    }
    return new Date()
};
icinfo.date.format = function(options) {
    options = options || {};
    var defaults = {
        date: null,
        dateObj: null,
        time: null,
        format: "{yyyy}-{MM}-{dd}"
    };
    var opts = icinfo.extend(defaults, options);
    if (opts.date == null && opts.dateObj == null && opts.time == null) {
        return ""
    }
    var $date = null;
    if (opts.date != null) {
        $date = icinfo.date.parse(opts.date)
    }
    if (opts.time != null) {
        $date = new Date();
        $date.setTime(opts.time)
    }
    if (opts.dateObj != null) {
        $date = new Date();
        if (!opts.dateObj.time) {
            return ""
        }
        $date.setTime(opts.dateObj.time)
    }
    if (! ($date instanceof Date)) {
        return ""
    }
    var $week = ("Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday").split("_");
    var $weekShort = ("Sun_Mon_Tue_Wed_Thu_Fri_Sat").split("_");
    var $weekChineseLong = ("星期日,星期一,星期二,星期三,星期四,星期五,星期六").split(",");
    var $weekChinese = ("周日,周一,周二,周三,周四,周五,周六").split(",");
    var $weekChineseShort = ("日,一,二,三,四,五,六").split(",");
    var $month = ("January,February,March,April,May,June,July,August,September,October,November,December").split(",");
    var $monthShort = ("Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec").split(",");
    var $monthChinese = ("一月,二月,三月,四月,五月,六月,七月,八月,九月,十月,十一月,十二月").split(",");
    var $monthChineseShort = ("一,二,三,四,五,六,七,八,九,十,十一,十二").split(",");
    var $fmt = {
        yyyy: $date.getFullYear().toString(),
        yyy: $date.getYear().toString(),
        M: ($date.getMonth() + 1).toString(),
        MM: icinfo.number.pad(($date.getMonth() + 1), 2),
        MMM: $monthShort[$date.getMonth()],
        MMMM: $month[$date.getMonth()],
        MC: $monthChinese[$date.getMonth()],
        MCS: $monthChineseShort[$date.getMonth()],
        dd: icinfo.number.pad($date.getDate(), 2),
        d: $date.getDate().toString(),
        HH: icinfo.number.pad($date.getHours(), 2),
        H: $date.getHours().toString(),
        mm: icinfo.number.pad($date.getMinutes(), 2),
        m: $date.getMinutes().toString(),
        ss: icinfo.number.pad($date.getSeconds(), 2),
        s: $date.getSeconds().toString(),
        w: $date.getDay().toString(),
        DD: $week[$date.getDay()],
        D: $weekShort[$date.getDay()],
        DCL: $weekChineseLong[$date.getDay()],
        DC: $weekChinese[$date.getDay()],
        DCS: $weekChineseShort[$date.getDay()]
    }
    console.log($fmt);
    var tmp = opts.format;
    if (icinfo.trim(tmp) == "") {
        return ""
    }
    return tmp.replace(/{yyyy}/g, $fmt.yyyy).replace(/{yyy}/g, $fmt.yyy).replace(/{MMMM}/g, $fmt.MMMM).replace(/{MMM}/g, $fmt.MMM).replace(/{MM}/g, $fmt.MM).replace(/{MC}/g, $fmt.MC).replace(/{MCS}/g, $fmt.MCS).replace(/{M}/g, $fmt.M).replace(/{dd}/g, $fmt.dd).replace(/{d}/g, $fmt.d).replace(/{HH}/g, $fmt.HH).replace(/{H}/g, $fmt.H).replace(/{mm}/g, $fmt.mm).replace(/{m}/g, $fmt.m).replace(/{ss}/g, $fmt.ss).replace(/{s}/g, $fmt.s).replace(/{w}/g, $fmt.w).replace(/{DD}/g, $fmt.DD).replace(/{DCL}/g, $fmt.DCL).replace(/{DCS}/g, $fmt.DCS).replace(/{DC}/g, $fmt.DC).replace(/{D}/g, $fmt.D)
};
icinfo.object = icinfo.object || {};
icinfo.object.extend = function(target, source) {
    for (var p in source) {
        if (source.hasOwnProperty(p)) {
            target[p] = source[p]
        }
    }
    return target
};
icinfo.extend = icinfo.object.extend;
icinfo.object.keys = function(source) {
    var result = [],
    resultLen = 0,
    k;
    for (k in source) {
        if (source.hasOwnProperty(k)) {
            result[resultLen++] = k
        }
    }
    return result
};
icinfo.object.values = function(source) {
    var result = [],
    resultLen = 0,
    k;
    for (k in source) {
        if (source.hasOwnProperty(k)) {
            result[resultLen++] = source[k]
        }
    }
    return result
};
icinfo.object.each = function(source, iterator) {
    var returnValue,
    key,
    item;
    if ('function' == typeof iterator) {
        for (key in source) {
            if (source.hasOwnProperty(key)) {
                item = source[key];
                returnValue = iterator.call(source, item, key);
                if (returnValue === false) {
                    break
                }
            }
        }
    }
    return source
};
icinfo.object.map = function(source, iterator) {
    var results = {};
    for (var key in source) {
        if (source.hasOwnProperty(key)) {
            results[key] = iterator(source[key], key)
        }
    }
    return results
};
icinfo.number = icinfo.number || {};
icinfo.number.encomma = function(source, length) {
    if (!length || length < 1) {
        length = 3
    }
    source = String(source).split(".");
    source[0] = source[0].replace(new RegExp('(\\d)(?=(\\d{' + length + '})+$)', 'ig'), "$1,");
    return source.join(".")
}
icinfo.number.decomma = function(source) {
    return source.toString().replace(/\,|\./g, "")
}
icinfo.number.pad = function(source, length) {
    var pre = "",
    negative = (source < 0),
    string = String(Math.abs(source));
    if (string.length < length) {
        pre = (new Array(length - string.length + 1)).join('0')
    }
    return (negative ? "-": "") + pre + string
};
icinfo.number.random = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min)
};
icinfo.url = icinfo.url || {};
icinfo.url.parse = function(url) {
    var query = url.substr(url.lastIndexOf('?') + 1),
    params = query.split('&'),
    len = params.length,
    result = {},
    i = 0,
    key,
    value,
    item,
    param;
    for (; i < len; i++) {
        if (!params[i]) {
            continue
        }
        param = params[i].split('=');
        key = param[0];
        value = param[1];
        item = result[key];
        if ('undefined' == typeof item) {
            result[key] = value
        } else if (icinfo.lang.isArray(item)) {
            item.push(value)
        } else {
            result[key] = [item, value]
        }
    }
    return result
};
icinfo.url.getParameter = function(key, url) {
    url = location.href || "";
    var reg = new RegExp("(^|&|\\?|#)" + key + "=([^&#]*)(&|\x24|#)", "");
    var match = url.match(reg);
    if (match) {
        return match[2]
    }
    return null
};
icinfo.url.escape = function(source) {
    return String(source).replace(/[#%&+=\/\\\ \ \f\r\n\t]/g,
    function(all) {
        return '%' + (0x100 + all.charCodeAt()).toString(16).substring(1).toUpperCase()
    })
};
icinfo.platform = icinfo.platform || {};
icinfo.platform.isAndroid = /android/i.test(navigator.userAgent);
icinfo.platform.isIphone = /iphone/i.test(navigator.userAgent);
icinfo.platform.isX11 = /x11/i.test(navigator.userAgent);
icinfo.platform.isMac = /macintosh/i.test(navigator.userAgent);
icinfo.platform.isWindows = /windows/i.test(navigator.userAgent);
icinfo.platform.isX11 = /x11/i.test(navigator.userAgent);
icinfo.lang = icinfo.lang || {};
icinfo.lang.isArray = function(source) {
    return '[object Array]' == Object.prototype.toString.call(source)
};
icinfo.lang.isBoolean = function(source) {
    return typeof source === 'boolean'
};
icinfo.lang.isDate = function(source) {
    return Object.toString.call(source) === "[object Date]" && source.toString() !== 'Invalid Date' && !isNaN(source)
};
icinfo.lang.isElement = function(source) {
    return !! (source && source.nodeName && source.nodeType == 1)
};
icinfo.lang.isFunction = function(source) {
    return '[object Function]' == Object.prototype.toString.call(source)
};
icinfo.lang.isNumber = function(source) {
    return '[object Number]' == Object.prototype.toString.call(source) && isFinite(source)
};
icinfo.lang.isObject = function(source) {
    return 'function' == typeof source || !!(source && 'object' == typeof source)
};
icinfo.lang.isString = function(source) {
    return '[object String]' == Object.prototype.toString.call(source)
};
icinfo.lang.toArray = function(source) {
    if (source === null || source === undefined) return [];
    if (icinfo.lang.isArray(source)) return source;
    if (typeof source.length !== 'number' || typeof source === 'string' || icinfo.lang.isFunction(source)) {
        return [source]
    }
    if (source.item) {
        var l = source.length,
        array = new Array(l);
        while (l--) array[l] = source[l];
        return array
    }
    return [].slice.call(source)
};
icinfo.isArray = icinfo.lang.isArray;
icinfo.isBoolean = icinfo.lang.isBoolean;
icinfo.isDate = icinfo.lang.isDate;
icinfo.isElement = icinfo.lang.isElement;
icinfo.isFunction = icinfo.lang.isFunction;
icinfo.isNumber = icinfo.lang.isNumber;
icinfo.isObject = icinfo.lang.isObject;
icinfo.isString = icinfo.lang.isString;
icinfo.toArray = icinfo.lang.toArray;
icinfo.browser = icinfo.browser || {};
icinfo.browser.ie = icinfo.ie = /msie (\d+\.\d+)/i.test(navigator.userAgent) ? (document.documentMode || +RegExp['\x241']) : undefined;
icinfo.browser.firefox = /firefox\/(\d+\.\d+)/i.test(navigator.userAgent) ? +RegExp['\x241'] : undefined;
icinfo.browser.chrome = /chrome\/(\d+\.\d+)/i.test(navigator.userAgent) ? +RegExp['\x241'] : undefined;
icinfo.browser.isGecko = /gecko/i.test(navigator.userAgent) && !/like gecko/i.test(navigator.userAgent);
icinfo.browser.isStrict = document.compatMode == "CSS1Compat";
icinfo.browser.isWebkit = /webkit/i.test(navigator.userAgent);
try {
    if (/(\d+\.\d+)/.test(external.max_version)) {
        icinfo.browser.maxthon = +RegExp['\x241']
    }
} catch(e) {}
icinfo.browser.opera = /opera(\/| )(\d+(\.\d+)?)(.+?(version\/(\d+(\.\d+)?)))?/i.test(navigator.userAgent) ? +(RegExp["\x246"] || RegExp["\x242"]) : undefined;
icinfo.browser.safari = /(\d+\.\d)?(?:\.\d)?\s+safari\/?(\d+\.\d+)?/i.test(navigator.userAgent) && !/chrome/i.test(navigator.userAgent) ? +(RegExp['\x241'] || RegExp['\x242']) : undefined;
icinfo.history = icinfo.history || {}; (function() {
    var _curHash;
    var _callbackFun;
    var _frame;
    function _addHistory(hash) {
        var fdoc = _frame.contentWindow.document;
        hash = hash || '#';
        fdoc.open();
        fdoc.write('\<script\>window.top.location.hash="' + hash + '";\</script\>');
        fdoc.close();
        fdoc.location.hash = hash
    }
    function _hashChangeCallBack() {
        _callbackFun && _callbackFun();
        _curHash = (window.location.hash.replace(/^#/, '') || '');
        console.log("_hashChangeCallBack>>", _curHash)
    }
    function _checkHash() {
        var hash = location.hash.replace(/^#/, '');
        if (hash != _curHash) {
            _frame ? _addHistory(hash) : _hashChangeCallBack()
        }
    }
    function listen(callBack) {
        _curHash = ('');
        if (callBack) _callbackFun = callBack;
        if (icinfo.browser.ie) {
            _frame = document.createElement('iframe');
            _frame.style.display = 'none';
            document.body.appendChild(_frame);
            _addHistory(window.location.hash);
            _frame.attachEvent('onload',
            function() {
                _hashChangeCallBack()
            });
            setInterval(_checkHash, 100)
        } else if (icinfo.browser.firefox < 3.6) {
            setInterval(_checkHash, 100)
        } else {
            if (_curHash != location.hash.replace(/^#/, '')) _curHash = (window.location.hash.replace(/^#/, '') || '');
            window.onhashchange = _hashChangeCallBack;
            console.log("icinfo.history.listen>>>", _curHash)
        }
    }
    icinfo.history.listen = listen
})();
icinfo.json = icinfo.json || {};
icinfo.json.parse = function(data) {
    return (new Function("return (" + data + ")"))()
};
icinfo.json.decode = icinfo.json.parse;
icinfo.json.stringify = (function() {
    var escapeMap = {
        "\b": '\\b',
        "\t": '\\t',
        "\n": '\\n',
        "\f": '\\f',
        "\r": '\\r',
        '"': '\\"',
        "\\": '\\\\'
    };
    function encodeString(source) {
        if (/["\\\x00-\x1f]/.test(source)) {
            source = source.replace(/["\\\x00-\x1f]/g,
            function(match) {
                var c = escapeMap[match];
                if (c) {
                    return c
                }
                c = match.charCodeAt();
                return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16)
            })
        }
        return '"' + source + '"'
    }
    function encodeArray(source) {
        var result = ["["],
        l = source.length,
        preComma,
        i,
        item;
        for (i = 0; i < l; i++) {
            item = source[i];
            switch (typeof item) {
            case "undefined":
            case "function":
            case "unknown":
                break;
            default:
                if (preComma) {
                    result.push(',')
                }
                result.push(icinfo.json.stringify(item));
                preComma = 1
            }
        }
        result.push("]");
        return result.join("")
    }
    function pad(source) {
        return source < 10 ? '0' + source: source
    }
    function encodeDate(source) {
        return '"' + source.getFullYear() + "-" + pad(source.getMonth() + 1) + "-" + pad(source.getDate()) + "T" + pad(source.getHours()) + ":" + pad(source.getMinutes()) + ":" + pad(source.getSeconds()) + '"'
    }
    return function(value) {
        switch (typeof value) {
        case 'undefined':
            return 'undefined';
        case 'number':
            return isFinite(value) ? String(value) : "null";
        case 'string':
            return encodeString(value);
        case 'boolean':
            return String(value);
        default:
            if (value === null) {
                return 'null'
            } else if (value instanceof Array) {
                return encodeArray(value)
            } else if (value instanceof Date) {
                return encodeDate(value)
            } else {
                var result = ['{'],
                encode = icinfo.json.stringify,
                preComma,
                item;
                for (var key in value) {
                    if (Object.prototype.hasOwnProperty.call(value, key)) {
                        item = value[key];
                        switch (typeof item) {
                        case 'undefined':
                        case 'unknown':
                        case 'function':
                            break;
                        default:
                            if (preComma) {
                                result.push(',')
                            }
                            preComma = 1;
                            result.push(encode(key) + ':' + encode(item))
                        }
                    }
                }
                result.push('}');
                return result.join('')
            }
        }
    }
})();
icinfo.json.encode = icinfo.json.stringify;
icinfo.data = icinfo.data || {};
icinfo.data.set = function(key, value) {
    var top = window.top,
    cache = top['$ICINFO_CACHE$'] || {};
    top['$ICINFO_CACHE$'] = cache;
    return cache[key] = value
}
icinfo.data.get = function(key) {
    var top = window.top,
    cache = top['$ICINFO_CACHE$'] || {};
    top['$ICINFO_CACHE$'] = cache;
    return cache[key]
}
icinfo.data.remove = function(key) {
    var cache = window.top['$ICINFO_CACHE$'];
    if (cache && cache[key]) delete cache[key]
}
icinfo.data.clear = function() {
    window.top['$ICINFO_CACHE$'] = {}
}
icinfo.data.getAll = function() {
    var top = window.top,
    cache = top['$ICINFO_CACHE$'] || {};
    top['$ICINFO_CACHE$'] = cache;
    return cache
}
icinfo.loader = {};
icinfo.loader.css = function(url, callback) {
    var head = document.getElementsByTagName("HEAD")[0];
    var css = document.createElement("link");
    console.log("link>> created");
    link.type = "text/css";
    link.rel = "stylesheet";
    link.href = url += (url.indexOf('?') > 0 ? '&': '?');
    head.insertBefore(css, head.firstChild);
    if (callback) callback()
}
icinfo.loader.js = function(url, callback) {
    var head = document.getElementsByTagName("HEAD")[0];
    var script = document.createElement("script");
    console.log("script>> created");
    script.src = url += (url.indexOf('?') > 0 ? '&': '?') + "_timestamp=" + ~new Date;
    script.charset = "utf-8";
    script.async = false;
    console.log("script>> src attr setted >>> ", url);
    head.insertBefore(script, head.firstChild);
    console.log("script>> loading...");
    script.onload = script.onreadystatechange = function() {
        console.log("script>> script.onreadystatechanged >>> ", this.readyState);
        if ((!this.readyState) || this.readyState == "loaded" || this.readyState == "complete") {
            if (callback) callback()
        }
    }
    script.onerror = function() {
        script.onload = script.onerror = undefined;
        console.log("script>> load fail");
        head.removeChild(script)
    }
}
icinfo.api = {
    proxy: ""
}
icinfo.api.getApp = function(message) {}
icinfo.api.getAppWindow = function(message) {}
icinfo.api.message = function(message) {
    if (icinfo.api.proxy == "") {
        console.log("icinfo.api.proxy is undefined");
        return
    }
    icinfo.api.send("message", {
        message: message
    })
}
icinfo.api.dialog = function(options) {
    if (icinfo.api.proxy == "") {
        console.log("icinfo.api.proxy is undefined");
        return
    }
    icinfo.api.send("dialog", options)
}
icinfo.api.send = function(type, options) {
    var id = "proxy_" + new Date().getTime();
    var obj = {
        proxy: id,
        type: type,
        data: options
    };
    var hash = encodeURIComponent(icinfo.json.encode(obj));
    var src = icinfo.api.proxy + "#" + hash;
    if (icinfo.ie && src.length > 2000) {
        console.log("icinfo.api.proxy: data is too large");
        return
    }
    var iframe = document.createElement("iframe");
    iframe.src = src;
    iframe.name = iframe.id = obj.proxy;
    iframe.style.display = "none";
    document.body.insertBefore(iframe);
    console.log("proxy>>> ", icinfo.api.proxy + "#" + hash)
}
icinfo.loaded = true;